// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package injector

import (
	"fmt"
	"github.com/L-oris/yabb/foreign/env"
	"github.com/L-oris/yabb/repositories/bucketrepository"
	"github.com/L-oris/yabb/repositories/postrepository"
	"github.com/L-oris/yabb/router"
	"github.com/L-oris/yabb/router/controllers/postcontroller"
	"github.com/L-oris/yabb/router/controllers/rootcontroller"
	"github.com/L-oris/yabb/services/postservice"
	"net/http"
)

// Injectors from controllers.go:

func provideRootController() (rootcontroller.Controller, error) {
	renderer, err := provideRenderer()
	if err != nil {
		return rootcontroller.Controller{}, err
	}
	v, err := provideFileServer()
	if err != nil {
		return rootcontroller.Controller{}, err
	}
	repository, err := provideBucket()
	if err != nil {
		return rootcontroller.Controller{}, err
	}
	db := provideDB()
	config := rootcontroller.Config{
		Renderer: renderer,
		Serve:    v,
		Bucket:   repository,
		DB:       db,
	}
	controller := rootcontroller.New(config)
	return controller, nil
}

func providePostController() (postcontroller.Controller, error) {
	renderer, err := provideRenderer()
	if err != nil {
		return postcontroller.Controller{}, err
	}
	service, err := providePostService()
	if err != nil {
		return postcontroller.Controller{}, err
	}
	config := postcontroller.Config{
		Renderer: renderer,
		Service:  service,
	}
	controller := postcontroller.New(config)
	return controller, nil
}

// Injectors from injector.go:

func InitializeRouter() (http.Handler, error) {
	controller, err := providePostController()
	if err != nil {
		return nil, err
	}
	rootcontrollerController, err := provideRootController()
	if err != nil {
		return nil, err
	}
	config := router.Config{
		PostController: controller,
		RootController: rootcontrollerController,
	}
	handler := router.New(config)
	return handler, nil
}

// Injectors from repositories.go:

func providePostRepository() (*postrepository.Repository, error) {
	db := provideDB()
	repository := postrepository.New(db)
	return repository, nil
}

// Injectors from services.go:

func providePostService() (*postservice.Service, error) {
	repository, err := provideBucket()
	if err != nil {
		return nil, err
	}
	postrepositoryRepository, err := providePostRepository()
	if err != nil {
		return nil, err
	}
	service := postservice.New(repository, postrepositoryRepository)
	return service, nil
}

// repositories.go:

func provideBucket() (*bucketrepository.Repository, error) {
	repo, err := bucketrepository.New(bucketrepository.BucketName(env.Vars.BucketName))
	if err != nil {
		return nil, fmt.Errorf("could not create bucket: %s", err.Error())
	}
	return repo, nil
}
